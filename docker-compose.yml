version: '3.3'
services:
  web:
    build: .
    ports:
      #LEWA Z MOJEGO LOCALHOSTU,PRAWA PORT KONTENERA
      - "5001:5000"
    depends_on:
      - db
      - rabbitmq
    command: bash -c "sleep 15;gunicorn -b 0.0.0.0:5000 scrapper.app.wsgi"
    environment:
      - APP_MODE=/app/config.py
      - PYTHONUNBUFFERED=1
      - PYTHONIOENCODING=UTF-8
    volumes:
      - /home/mat/PycharmProjects/scrapper/config/configProduction.py:/app/config.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 1m30s
      timeout: 10s
      retries: 3
#      start_period: 40s
#
  consumer1:
    build: .
    depends_on:
      - db
      - rabbitmq
    command: bash -c "python /app/config/converter_py_to_json.py && python /app/src/scrapper/worker/tasks.py"
    environment:
      - APP_MODE=/app/configProduction.json
#  consumer2:
#    build: .
#    depends_on:
#      - db
#      - rabbitmq
#    command: bash -c "python /app/src/scrapper/consumer2.py"
#    environment:
#      - CONFIG_SRC=/app/config/config.${PROJECT_MODE}.json
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql


  prom:
    image: quay.io/prometheus/prometheus:v2.0.0
    volumes:
      - ./monitor/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
      - 9090:9090
    depends_on:
      - exporter
  exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
  #    network_mode: host
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prom

# Names our volume
volumes:
  my-db:
